[{"authors":["admin"],"categories":null,"content":"Phil Palmer is an incoming PhD student in biology at the University of Cambridge, in Professor Jonathan Heeney\u0026lsquo;s lab. His research interests include bioinformatics, machine learning and viral genomics. He is currently working on using computational methods to predict and validate vaccine candidates, including those used for the development of a universal flu vaccine.\nPrior to this he worked for two years as an early employee and bioinformatician at the breakout start-up Lifebit. He also holds a first-class degree in Biology from the University of Southampton.\n","date":1590796800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1590796800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://philpalmer.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Phil Palmer is an incoming PhD student in biology at the University of Cambridge, in Professor Jonathan Heeney\u0026lsquo;s lab. His research interests include bioinformatics, machine learning and viral genomics. He is currently working on using computational methods to predict and validate vaccine candidates, including those used for the development of a universal flu vaccine.\nPrior to this he worked for two years as an early employee and bioinformatician at the breakout start-up Lifebit.","tags":null,"title":"Phil Palmer","type":"authors"},{"authors":null,"categories":null,"content":"","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"438a6bf03198357d3bba41e02c722805","permalink":"https://philpalmer.github.io/documentation/biology/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/documentation/biology/","section":"documentation","summary":":dna: Coming soon...","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"💻 Bioinformatics, Data Science, Tools \u0026amp; Infrastructure\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"93b3d0164a891f55e76f46a00cb3a27e","permalink":"https://philpalmer.github.io/documentation/computing/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/documentation/computing/","section":"documentation","summary":":computer: Bioinformatics, Data Science, Tools \u0026 Infrastructure","tags":null,"title":"Computing","type":"docs"},{"authors":null,"categories":null,"content":"","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"bca2204571be3fb52f729a6a9efa896b","permalink":"https://philpalmer.github.io/documentation/maths/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/documentation/maths/","section":"documentation","summary":":1234: Coming soon...","tags":null,"title":"Maths","type":"docs"},{"authors":null,"categories":null,"content":"Coming soon\u0026hellip;\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9c9b12fbd9982780ef7f65e190d6de42","permalink":"https://philpalmer.github.io/documentation/computing/machine-learning/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/machine-learning/","section":"documentation","summary":"Coming soon\u0026hellip;","tags":null,"title":"Meaching learning","type":"docs"},{"authors":null,"categories":null,"content":"Bash is a languauge used in UNIX environments. The basic/most used commands are:\nls # list files cd # change directory mkdir # make directory touch # make file cat # print contents of file mv # move file cp # copy file rm # remove file chmod # change file permissions man # view mannual pages You can see a more comprehensive list here\nUseful bash commands Keyboard shortcuts Ctrl + A # move to start of the line Ctrl + E # move to end of the line Ctrl + C # kill the current command Ctrl + Z # put command to sleep (bg \u0026amp; fg used to run in background \u0026amp; foreground respectively) Ctrl + R # search previous commands Ctrl + L # clear the screen Commands cd - # return to previous directory du -h --max-depth=1 | sort -hr # check folder size \u0026amp; return largest to smallest export PATH=$PATH:/usr/bin # add /usr/bin to the path find . -name \u0026#34;pattern\u0026#34; -print # print files \u0026amp; directories in the current directory that match pattern tar -xvzf # extract .tar.gz file which # find location of executable grep \u0026lt;pattern\u0026gt; \u0026lt;filename\u0026gt; # find pattern in file sed \u0026#39;s/a/b/g\u0026#39; # replace a with b uname -a # shows kernel information df -h # return storage/disk spaace information wget # download file Scripting varname=value # declare a variable array=(valA valB valC) # define an array ${array[i]} # displays array\u0026#39;s value for this index $(UNIX command) # command substitution: runs the command and returns standard output if condition then statements [elif condition then statements...] [else statements] fi for x in {1..10} do statements done for name [in list] do statements that can use $name done while condition; do statements done Other Store official binaries in: /usr/bin Store unofficial binaries in: /usr/local/bin\nTools Use axel to download large files in parrallel\nawk Append chr to bed file:\nawk \u0026#39;{print \u0026#34;chr\u0026#34; $0;}\u0026#39; genes_hg19.bed \u0026gt; chr_genes_hg19.bed Print columns from comma separated file:\nawk -F\u0026#39;,\u0026#39; \u0026#39;{print $3}\u0026#39; myfile.txt Read file as tab delimited:\nawk \u0026#39;BEGIN {OFS = FS} {print $3}\u0026#39; file.tsv Print columns tab separated:\nawk \u0026#39;{print $1,\u0026#34;\\t\u0026#34;,$2}\u0026#39; file.tsv Print lines where the value in the first column is true:\nawk \u0026#39;$1 == \u0026#34;true\u0026#34; {print $0}\u0026#39; file.txt tmux Tmux lets you run multiple sessions/programs within one terminal. On Mac iTerm2 has good support for tmux\n# open new tmux session tmux # run command # disconnect Ctrl + B, D # list sessions tmux ls # attach session tmux attach # or tmux a -t myname # leave exit See a more complete list of tmux commands here\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5f08352406fe1ce6c54e5fdcd3397c41","permalink":"https://philpalmer.github.io/documentation/computing/bash/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/bash/","section":"documentation","summary":"Bash is a languauge used in UNIX environments. The basic/most used commands are:\nls # list files cd # change directory mkdir # make directory touch # make file cat # print contents of file mv # move file cp # copy file rm # remove file chmod # change file permissions man # view mannual pages You can see a more comprehensive list here\nUseful bash commands Keyboard shortcuts Ctrl + A # move to start of the line Ctrl + E # move to end of the line Ctrl + C # kill the current command Ctrl + Z # put command to sleep (bg \u0026amp; fg used to run in background \u0026amp; foreground respectively) Ctrl + R # search previous commands Ctrl + L # clear the screen Commands cd - # return to previous directory du -h --max-depth=1 | sort -hr # check folder size \u0026amp; return largest to smallest export PATH=$PATH:/usr/bin # add /usr/bin to the path find .","tags":null,"title":"Bash","type":"docs"},{"authors":null,"categories":null,"content":"Conda is a package management system that makes installing tools trivial by installing all of their dependencies. See the official documentation and installation details\nInstall conda package conda install -c $channel ${package}=${version} conda install -c bioconda fastqc=0.11.8 # example Create conda environment conda env create --name $env_name --file environment.yml Save conda environment conda env export --no-builds | grep -v \u0026#34;^prefix: \u0026#34; \u0026gt; environment.yml Activate conda environment source activatate $env_name ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b6a028d48e044c135c7c120e0e753e97","permalink":"https://philpalmer.github.io/documentation/computing/conda/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/conda/","section":"documentation","summary":"Conda is a package management system that makes installing tools trivial by installing all of their dependencies. See the official documentation and installation details\nInstall conda package conda install -c $channel ${package}=${version} conda install -c bioconda fastqc=0.11.8 # example Create conda environment conda env create --name $env_name --file environment.yml Save conda environment conda env export --no-builds | grep -v \u0026#34;^prefix: \u0026#34; \u0026gt; environment.yml Activate conda environment source activatate $env_name ","tags":null,"title":"Conda","type":"docs"},{"authors":null,"categories":null,"content":"Coming soon\u0026hellip;\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6368ec399e5c7da7147e30fb66a3d558","permalink":"https://philpalmer.github.io/documentation/computing/docker/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/docker/","section":"documentation","summary":"Coming soon\u0026hellip;","tags":null,"title":"Docker","type":"docs"},{"authors":null,"categories":null,"content":"Coming soon\u0026hellip;\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"c9a6f33854bc236a2af3248b3871b426","permalink":"https://philpalmer.github.io/documentation/computing/git/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/git/","section":"documentation","summary":"Coming soon\u0026hellip;","tags":null,"title":"Git","type":"docs"},{"authors":null,"categories":null,"content":"Nextflow is a workflow management system that allows you to build highly parallelizable \u0026amp; scalable computational pipelines\nAdvatanges Advantages of using Nextflow (and workflow managers in general) is that they help make workflows more:\n Portable  Thanks in part to it\u0026rsquo;s built-in support of containers Nextflow pipelines can be run in a portable manner across different instructure be it Cloud, local or HPC   Reproducible  Thanks in part to it\u0026rsquo;s built-in support of containers such as Docker \u0026amp; Singularity   Scalable  Thanks in part to Nextflow\u0026rsquo;s built-in parallelism as it\u0026rsquo;s built on the data flow programming model    There are other workflow management systems such as Snakemake, CWL and WDL, however, I am by far more familiar with Nextflow. Some of the main advantages of each are that Nextflow benefits from lots of community support (see nf-core), Snakemake is written in Python and CWL/WDL benefits from support from the Broad Institute.\nBasics The basic pipeline structure is as follows:\n Pipeline (main script)  Channels Processes  Input Output Script     Configuration  See the Official documentation \u0026amp; Nextflow tutorial\nPatterns You can find Nextflow scripts for each of the examples here: https://github.com/PhilPalmer/docs/tree/master/computing/nextflow-scripts\nInspired by Nextflow patterns\nInputs Split text input Create a channel from a plain text file split line by line\nChannel .fromPath(params.regions) .ifEmpty { exit 1, \u0026quot;Cannot find file : ${params.regions}\u0026quot; } .splitText() .map { it -\u0026gt; it.trim() } .set { regions } Run it:\nnextflow run split_text_input.nf CSV input Create a channel from a CSV file input\nChannel .fromPath(params.vcf_paths) .ifEmpty { exit 1, \u0026quot;Cannot find CSV file : ${params.vcf_paths}\u0026quot; } .splitCsv(skip:1) .map { sample_id,vcf,index -\u0026gt; [sample_id,file(vcf),file(index)] } .set { vcfs } Run it:\nnextflow run csv_input.nf Reusable channels Nextflow consumes (queue) channels meaning that they are consumed on use. However, it is possible to prevent needing to duplicate channels by creating value channels instead like so!\ninputChannel = Channel.value(file(params.input_path)) // Channel can be used multiple times inputChannel.println() inputChannel.println() Run it:\nnextflow run reusable_channels.nf Channel duplication Sometimes you may need to duplicate a channel. This is espeically true if it\u0026rsquo;s a channel which contains multiple values (and/or is a queue channel) because these are consumed by Nextflow on use\nChannel .fromPath(params.input_path) .ifEmpty { exit 1, \u0026quot;${params.input_path} not found\u0026quot;} .into { inputChannel; inputChannel1; inputChannel2 } Run it:\nnextflow run channel_duplication.nf Get basename Get the basename (i.e. the name filename minus the file extension) of a file in a channel. You can also use simpleName to get everything prior to the first period (.)\nChannel .fromPath(params.input_path) .map { file -\u0026gt; [file.baseName, file] } .ifEmpty { exit 1, \u0026quot;${params.input_path} not found\u0026quot;} .set { inputChannel } Run it:\nnextflow run get_basename.nf Input validation if (!params.important_parameter) exit 1, \u0026quot;The params `--important_parameter` has not been set.\\n\\tPlease provide a valid value for this parameter\u0026quot; Run it:\nnextflow run input_validation.nf  Processes Conditional input files Nextflow does not like having conditional input files for processes. Fortunately you can use optional input files like so\noptional_input_path = params.optional_input_path ? params.optional_input_path : 'data/no_file.txt' Channel .fromPath(optional_input_path) .ifEmpty { exit 1, \u0026quot;${optional_input_path} not found\u0026quot;} .set { optionalInputChannel } process test { echo true input: file(optional_input) from optionalInputChannel script: optional_flag = optional_input != 'no_file.txt' ? \u0026quot;--optional_input $optional_input\u0026quot; : '' \u0026quot;\u0026quot;\u0026quot; some_command.sh $optional_flag \u0026quot;\u0026quot;\u0026quot; } Run it:\nnextflow run optional_input.nf Conditional flags Here the optional_flag will only be present if the user has set the optional_flag Nextflow parameter\nprocess test { echo true script: optional_flag = params.optional_flag ? \u0026quot;--optional_flag $params.optional_flag\u0026quot; : '' \u0026quot;\u0026quot;\u0026quot; some_command.sh $optional_flag \u0026quot;\u0026quot;\u0026quot; } Run it:\nnextflow run optional_input.nf Extra flags Last index of  Transforming operators Reduce channel https://github.com/lifebit-ai/genetic-traits/blob/master/main.nf#L157\nComplex mapping  Debugging Printing channel Touch files  Output PublishDir https://github.com/lifebit-ai/genetic-traits/blob/master/main.nf#L204-L210\n Groovy Helper functions // define helper functions def isMode(mode) { params.mode.toLowerCase().contains(mode) } def isTsv() { params.reads.endsWith('tsv') } def get_pairs_simplename(simplename) { simplename = simplename.endsWith('_1') ? simplename.substring(0, simplename.length() - 2) : simplename simplename = simplename.endsWith('_R1') ? simplename.substring(0, simplename.length() - 3) : simplename return simplename }  Configuration Genomes config Cloud create You can use Nextflow to launch an AWS instance (in this case one to run Dragen)\ncloud-spot.config:\naws { accessKey = '' secretKey = '' region = 'eu-west-1' } cloud { imageId = 'ami-0ba4b94467989e99a' instanceType = 'f1.4xlarge' userName = 'centos' keyName = 'dragen' bootStorageSize = '100 GB' } Run it:\nnextflow -c cloud-spot.config cloud create cluster_name -c 1 Tips  nextflow console log.info  Useful operators groupTuple()\ncombine() (by)\nmap() Swiss army knife Re-order or reduce channels (although Nextflow also provides a reduce function)\nset()\ninto()\n.set()\ncollect()\nsplitCsv()\nmerge()\nflatten()\nchoice()\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5345c663c71464c31e41753621ed9138","permalink":"https://philpalmer.github.io/documentation/computing/nextflow/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/nextflow/","section":"documentation","summary":"Nextflow is a workflow management system that allows you to build highly parallelizable \u0026amp; scalable computational pipelines\nAdvatanges Advantages of using Nextflow (and workflow managers in general) is that they help make workflows more:\n Portable  Thanks in part to it\u0026rsquo;s built-in support of containers Nextflow pipelines can be run in a portable manner across different instructure be it Cloud, local or HPC   Reproducible  Thanks in part to it\u0026rsquo;s built-in support of containers such as Docker \u0026amp; Singularity   Scalable  Thanks in part to Nextflow\u0026rsquo;s built-in parallelism as it\u0026rsquo;s built on the data flow programming model    There are other workflow management systems such as Snakemake, CWL and WDL, however, I am by far more familiar with Nextflow.","tags":null,"title":"Nextflow","type":"docs"},{"authors":null,"categories":null,"content":"Coming soon\u0026hellip;\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"0368524d8b987351d5de565584907139","permalink":"https://philpalmer.github.io/documentation/computing/python/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/python/","section":"documentation","summary":"Coming soon\u0026hellip;","tags":null,"title":"Python","type":"docs"},{"authors":null,"categories":null,"content":"Coming soon\u0026hellip;\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"16cfe6508f904a1c7dd233b568a6a6af","permalink":"https://philpalmer.github.io/documentation/computing/r/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/documentation/computing/r/","section":"documentation","summary":"Coming soon\u0026hellip;","tags":null,"title":"R","type":"docs"},{"authors":["Phil Palmer"],"categories":[],"content":"My opinion on blogging to paraphrase Winston Churchill - “Never have so many, written so much, read by so few.”\nSo why on Earth have I started a blog? I make a lot of notes and often find myself referring back to these including programming commands etc. I figured I will store them here \u0026amp; open-source them. This is for three main purposes:\n To help me organise my thoughts and retain the things I learn A central place to store \u0026amp; refer back to notes For other people to use on the small chance that they may be useful for others  Who am I? I am a bioinformatician and PhD student at the University of Cambridge\nWhat will I write about I hope to start blogging more frequently about (my) research and PhD-related things to document stuff that I learn. I\u0026rsquo;ll likely cover topics such as:\n Biology  Immunology Vaccines Viruses   Computing  Bioinformatics Data Science Machine learning   Maths  Statistics Probability theory Linear algebra    As time goes on I may expand to cover other interests. These may include effective altruism, tech (start-ups), personal development, productivity, life learnings, reading, travel, health and relationships.\nThank you I don\u0026rsquo;t really anticipate anyone else reading this blog so I\u0026rsquo;m flattered if you are 🙂\nIf you’re interested in any of the topics above then you’re in the right place. I will generally try and keep my posts short, fun \u0026amp; practical. I would love any feedback you might have so please don’t hesitate to reach out.\nThanks for reading!\n","date":1590796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590796800,"objectID":"81429798deaca2abbb4b3f7902b9cd22","permalink":"https://philpalmer.github.io/post/my-frst-blog-post/","publishdate":"2020-05-30T00:00:00Z","relpermalink":"/post/my-frst-blog-post/","section":"post","summary":"My first blog post :)","tags":null,"title":"Hello, world!","type":"post"},{"authors":null,"categories":null,"content":"Built bioinformatics pipeline to automate the discovery differentially expressed genes \u0026amp; pathways from microarray data to be used for a vaccines project with GSK\n","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"4928e172f247e079e76f4315f9bab1b9","permalink":"https://philpalmer.github.io/project/microarray-expression/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/project/microarray-expression/","section":"project","summary":"Built bioinformatics pipeline to automate the discovery of differentially expressed genes \u0026 pathways from microarray data","tags":["Bioinformatics","Pharma","Lifebit","R","Docker","RNA","Vaccines"],"title":"Microarray Expression Analysis","type":"project"},{"authors":null,"categories":null,"content":"Customer support \u0026amp; bioinformatics pipeline development for Direct To Consumer (DTC) genetics companies such as Sano \u0026amp; Nebula Genomics.\nFor example, I developed and improved multiple bioinformatics pipelines based on user feedback including:\n Dragen  Developed Nextflow pipeline for running Illumina\u0026rsquo;s Dragen pipeline including indexing, mapping, germline/somatic variant calling \u0026amp; copy number variant (CNV) analysis   Imputation  Benchmarked multiple imputation pipelines Greatly improved Lifebit\u0026rsquo;s imputation pipeline by adding input validation \u0026amp; continuous integration testing. This resulted in a highly robust imputation pipeline used in production by direct to consumer genetics companies such as Nebula Genomics and Sano Genetics thousands of times to analyse their customers’ data. Built imputation RShiny app   Ancestry  Developed Lifebit\u0026rsquo;s intial Ancestry pipeline    ","date":1588118400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588118400,"objectID":"f00039962924bdfa6b4c149055e3af93","permalink":"https://philpalmer.github.io/project/dtc/","publishdate":"2020-04-29T00:00:00Z","relpermalink":"/project/dtc/","section":"project","summary":"Bioinformatics pipeline development for Direct To Consumer (DTC) genetics companies","tags":["Bioinformatics","Web Development","Illumina","DTC","Lifebit","Nextflow","Docker","R","Python","RShiny","DNA","Variant Calling","SNPs analysis","Imputation"],"title":"DTC support","type":"project"},{"authors":null,"categories":null,"content":"Found drug targets and pathways to accelerate the pharma industry, demoing the results for a pilot with AstraZeneca.\nThis was for a project for the AI Engine. I built:\n An RShiny application to visaulise the results of the drug targets A bioinformatics pipeline in Nextflow to automate the discovery of enriched pathways  ","date":1586390400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586390400,"objectID":"23f08f096e07ddabc713e939cf58c993","permalink":"https://philpalmer.github.io/project/drug-repurposing/","publishdate":"2020-04-09T00:00:00Z","relpermalink":"/project/drug-repurposing/","section":"project","summary":"Found drug targets and pathways to accelerate the pharma industry","tags":["Bioinformatics","Web Development","Pharma","Lifebit","Nextflow","Docker","R","RShiny","RNA","Drug Repurposing"],"title":"Drug repurposing \u0026 pathway analysis","type":"project"},{"authors":null,"categories":null,"content":"This side project was done for a PhD application research proposal as a proof of concept\nI used differential gene expression analysis \u0026amp; drug repurposing techniques to find compounds with similar gene expression profiles to the HSP90 inhibitor Geldanamycin\n","date":1569110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569110400,"objectID":"2ba7743ca4986139a8628c7fa834b259","permalink":"https://philpalmer.github.io/project/antiviral-drug-repurposing/","publishdate":"2019-09-22T00:00:00Z","relpermalink":"/project/antiviral-drug-repurposing/","section":"project","summary":"Using differential gene expression \u0026 drug repurposing techniques to find broad-spectrum antiviral candidates","tags":["Bioinformatics","Web Development","Nextflow","nf-core","Docker","RShiny","RNA","Drug Repurposing","Viruses","Antivirals"],"title":"Antiviral drug repurposing","type":"project"},{"authors":null,"categories":null,"content":"Helped conduct research \u0026amp; user interviews for a microbiome metagenomics project, conducted with Science Practice \u0026amp; funded by Innovate UK\n","date":1568937600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568937600,"objectID":"b2fe1c5b71d19e6868de53cc51fc5177","permalink":"https://philpalmer.github.io/project/metagenomics/","publishdate":"2019-09-20T00:00:00Z","relpermalink":"/project/metagenomics/","section":"project","summary":"Helped in the research \u0026 user interviews for a microbiome metagenomics project","tags":["Lifebit","Research","Metagenomics"],"title":"Metagenomics Research","type":"project"},{"authors":null,"categories":null,"content":"Enabled the Benjamin Haibe-Kains (BHK) lab to create more reproducible research by developing a pharmacogenomics Nextflow pipelines to process the GRAY 2013 \u0026amp; 2017 datasets (see one of their most recent papers here for more info)\n","date":1565913600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565913600,"objectID":"b20cea4fd310adde64571ae1efc72469","permalink":"https://philpalmer.github.io/project/pharmacogenomics/","publishdate":"2019-08-16T00:00:00Z","relpermalink":"/project/pharmacogenomics/","section":"project","summary":"Developed pharmacogenomics Nextflow pipelines","tags":["Academia","Bioinformatics","Lifebit","Docker","Nextflow","R","Pharamcogenomics"],"title":"Pharmacogenomics","type":"project"},{"authors":[],"categories":null,"content":"Prepared and taught multiple bioinformatics workshops at The Jackson Laboratory in the US, one of which was to 45 participants\n","date":1564131600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564131600,"objectID":"c9f30ced1d0830ac9e9d16c946a4c50f","permalink":"https://philpalmer.github.io/talk/jax/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/jax/","section":"talk","summary":"Intro to Nextflow, Containers and The Cloud (45 participants)","tags":[],"title":"Jackson Labs Tutorial","type":"talk"},{"authors":[],"categories":null,"content":"","date":1560848400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560848400,"objectID":"f92cf33590fd650c9aa627a3bc720484","permalink":"https://philpalmer.github.io/talk/crick/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/crick/","section":"talk","summary":"Intro to Nextflow, Containers and The Cloud","tags":[],"title":"Francis Crick Institute","type":"talk"},{"authors":[],"categories":null,"content":"","date":1559552400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559552400,"objectID":"c45dabaed51c0782847bfaf82cf2ee5c","permalink":"https://philpalmer.github.io/talk/cleam-meat-hack/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/cleam-meat-hack/","section":"talk","summary":"Winner of the world's first clean meat hackathon","tags":[],"title":"Clean meat hackathon","type":"talk"},{"authors":null,"categories":null,"content":"Dockerised python scripts \u0026amp; Nextflow pipeline for converting the file format of aerial images, developed for the United Nations Department of Statistics\n","date":1557360000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557360000,"objectID":"ec3e0504d89a7a2653313dad2c2a3163","permalink":"https://philpalmer.github.io/project/ecw-converter/","publishdate":"2019-05-09T00:00:00Z","relpermalink":"/project/ecw-converter/","section":"project","summary":"Dockerised python scripts \u0026 pipeline for converting the file format of aerial images","tags":["Data Science","United Nations","Lifebit","Docker","Nextflow","Python"],"title":"ECW Converter","type":"project"},{"authors":[],"categories":[],"content":"Welcome to Slides academia\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three  A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://philpalmer.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using academia's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Google\u0026rsquo;s DeepVariant variant caller as a Nextflow pipeline (~30 stars on GitHub). Developed as one of the first pipelines as part of the open-source nf-core community to help enable reproducibility within the wider bioinformatics community\n","date":1542585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542585600,"objectID":"134a801d3090aad5915dada364874e83","permalink":"https://philpalmer.github.io/project/deepvariant/","publishdate":"2018-11-19T00:00:00Z","relpermalink":"/project/deepvariant/","section":"project","summary":"Google's DeepVariant variant caller as a Nextflow pipeline","tags":["Bioinformatics","DNA","Google","Lifebit","Nextflow","nf-core","Docker","Variant Calling","SNPs analysis"],"title":"nf-core/deepvariant","type":"project"},{"authors":["Phil Palmer"],"categories":null,"content":"","date":1521072000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521072000,"objectID":"39991e13feb6a917e0b638d49d5498db","permalink":"https://philpalmer.github.io/publication/bachelors-thesis/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/bachelors-thesis/","section":"publication","summary":"Differences in Telomere Length Predicted from the Exome Data of Bladder Cancer and Matched Control Tissue Samples","tags":["Academia","Aging","Bioinformatics","Data Science","DNA","Machine learning","Python","Research","SNPs analysis","Variant calling"],"title":"Bachelor's Thesis","type":"publication"},{"authors":null,"categories":null,"content":"docs 📚 If you think anything is wrong or can be improved please don\u0026rsquo;t hesitate to submit a PR\nBioinformatics Conda\nNextflow\nData science Machine learning\nPython\nR\nTools Bash\nDocker\nGit\nInfrastructure - Local/Cloud/HPC AWS\nDevelopment environment\nGCloud\nHPC\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"40d2da8cb4f0151381887a6d69991c4c","permalink":"https://philpalmer.github.io/documentation/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/documentation/readme/","section":"documentation","summary":"docs 📚 If you think anything is wrong or can be improved please don\u0026rsquo;t hesitate to submit a PR\nBioinformatics Conda\nNextflow\nData science Machine learning\nPython\nR\nTools Bash\nDocker\nGit\nInfrastructure - Local/Cloud/HPC AWS\nDevelopment environment\nGCloud\nHPC","tags":null,"title":"","type":"documentation"}]