<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computing on Phil Palmer</title><link>https://philpalmer.github.io/blog/documentation/computing/</link><description>Recent content in Computing on Phil Palmer</description><generator>Source Themes academia (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://philpalmer.github.io/blog/documentation/computing/index.xml" rel="self" type="application/rss+xml"/><item><title>Meaching learning</title><link>https://philpalmer.github.io/blog/documentation/computing/machine-learning/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/machine-learning/</guid><description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description></item><item><title>Bash</title><link>https://philpalmer.github.io/blog/documentation/computing/bash/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/bash/</guid><description>
&lt;p&gt;Bash is a languauge used in UNIX environments. The basic/most used commands are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls # list files
cd # change directory
mkdir # make directory
touch # make file
cat # print contents of file
mv # move file
cp # copy file
rm # remove file
chmod # change file permissions
man # view mannual pages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see a more comprehensive list &lt;a href=&#34;https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;useful-bash-commands&#34;&gt;Useful bash commands&lt;/h2&gt;
&lt;h3 id=&#34;keyboard-shortcuts&#34;&gt;Keyboard shortcuts&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Ctrl + A # move to start of the line
Ctrl + E # move to end of the line
Ctrl + C # kill the current command
Ctrl + Z # put command to sleep (bg &amp;amp; fg used to run in background &amp;amp; foreground respectively)
Ctrl + R # search previous commands
Ctrl + L # clear the screen
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd - # return to previous directory
du -h --max-depth=1 | sort -hr # check folder size &amp;amp; return largest to smallest
export PATH=$PATH:/usr/bin # add /usr/bin to the path
find . -name &amp;quot;pattern&amp;quot; -print # print files &amp;amp; directories in the current directory that match pattern
tar -xvzf # extract .tar.gz file
which # find location of executable
grep &amp;lt;pattern&amp;gt; &amp;lt;filename&amp;gt; # find pattern in file
sed &#39;s/a/b/g&#39; # replace a with b
uname -a # shows kernel information
df -h # return storage/disk spaace information
wget # download file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;scripting&#34;&gt;Scripting&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;varname=value # declare a variable
array=(valA valB valC) # define an array
${array[i]} # displays array&#39;s value for this index
$(UNIX command) # command substitution: runs the command and returns standard output
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if condition
then
statements
[elif condition
then statements...]
[else
statements]
fi
for x in {1..10}
do
statements
done
for name [in list]
do
statements that can use $name
done
while condition; do
statements
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;
&lt;p&gt;Store official binaries in: &lt;code&gt;/usr/bin&lt;/code&gt;
Store unofficial binaries in: &lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;p&gt;Use &lt;a href=&#34;https://github.com/axel-download-accelerator/axel&#34; target=&#34;_blank&#34;&gt;axel&lt;/a&gt; to download large files in parrallel&lt;/p&gt;
&lt;h2 id=&#34;awk&#34;&gt;awk&lt;/h2&gt;
&lt;p&gt;Append chr to bed file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{print &amp;quot;chr&amp;quot; $0;}&#39; genes_hg19.bed &amp;gt; chr_genes_hg19.bed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Print columns from comma separated file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk -F&#39;,&#39; &#39;{print $3}&#39; myfile.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read file as tab delimited:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;BEGIN {OFS = FS} {print $3}&#39; file.tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Print columns tab separated:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{print $1,&amp;quot;\t&amp;quot;,$2}&#39; file.tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Print lines where the value in the first column is true:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;$1 == &amp;quot;true&amp;quot; {print $0}&#39; file.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tmux&#34;&gt;tmux&lt;/h2&gt;
&lt;p&gt;Tmux lets you run multiple sessions/programs within one terminal. On Mac &lt;a href=&#34;https://www.iterm2.com/&#34; target=&#34;_blank&#34;&gt;iTerm2&lt;/a&gt; has good support for tmux&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# open new tmux session
tmux
# run command
# disconnect
Ctrl + B, D
# list sessions
tmux ls
# attach session
tmux attach
# or
tmux a -t myname
# leave
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See a more complete list of tmux commands &lt;a href=&#34;https://gist.github.com/MohamedAlaa/2961058&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Conda</title><link>https://philpalmer.github.io/blog/documentation/computing/conda/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/conda/</guid><description>
&lt;p&gt;&lt;img src=&#34;../images/conda_logo.svg&#34; alt=&#34;conda_logo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Conda is a package management system that makes installing tools trivial by installing all of their dependencies.&lt;/em&gt; See the &lt;a href=&#34;https://docs.conda.io/en/latest/&#34; target=&#34;_blank&#34;&gt;official documentation&lt;/a&gt; and &lt;a href=&#34;https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html&#34; target=&#34;_blank&#34;&gt;installation details&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-conda-package&#34;&gt;Install conda package&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda install -c $channel ${package}=${version}
conda install -c bioconda fastqc=0.11.8 # example
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-conda-environment&#34;&gt;Create conda environment&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create --name $env_name --file environment.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;save-conda-environment&#34;&gt;Save conda environment&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env export --no-builds | grep -v &amp;quot;^prefix: &amp;quot; &amp;gt; environment.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;activate-conda-environment&#34;&gt;Activate conda environment&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source activatate $env_name
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Docker</title><link>https://philpalmer.github.io/blog/documentation/computing/docker/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/docker/</guid><description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description></item><item><title>Git</title><link>https://philpalmer.github.io/blog/documentation/computing/git/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/git/</guid><description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description></item><item><title>Nextflow</title><link>https://philpalmer.github.io/blog/documentation/computing/nextflow/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/nextflow/</guid><description>
&lt;p&gt;&lt;img src=&#34;../images/nextflow_logo.png&#34; alt=&#34;nextflow_logo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nextflow is a workflow management system that allows you to build highly parallelizable &amp;amp; scalable computational pipelines&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;advatanges&#34;&gt;Advatanges&lt;/h1&gt;
&lt;p&gt;Advantages of using Nextflow (and workflow managers in general) is that they help make workflows more:
- Portable
- Thanks in part to it&amp;rsquo;s built-in support of containers Nextflow pipelines can be run in a portable manner across different instructure be it Cloud, local or HPC
- Reproducible
- Thanks in part to it&amp;rsquo;s built-in support of containers such as Docker &amp;amp; Singularity
- Scalable
- Thanks in part to Nextflow&amp;rsquo;s built-in parallelism as it&amp;rsquo;s built on the data flow programming model&lt;/p&gt;
&lt;p&gt;There are other workflow management systems such as &lt;a href=&#34;https://snakemake.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34;&gt;Snakemake&lt;/a&gt;, &lt;a href=&#34;https://www.commonwl.org/&#34; target=&#34;_blank&#34;&gt;CWL&lt;/a&gt; and &lt;a href=&#34;https://github.com/openwdl/wdl#getting-started-with-wdl&#34; target=&#34;_blank&#34;&gt;WDL&lt;/a&gt;, however, I am by far more familiar with &lt;a href=&#34;https://www.nextflow.io/index.html&#34; target=&#34;_blank&#34;&gt;Nextflow&lt;/a&gt;. Some of the main advantages of each are that Nextflow benefits from lots of community support (see &lt;a href=&#34;https://nf-co.re/&#34; target=&#34;_blank&#34;&gt;nf-core&lt;/a&gt;), Snakemake is written in &lt;a href=&#34;../python&#34;&gt;Python&lt;/a&gt; and CWL/WDL benefits from support from the &lt;a href=&#34;https://www.broadinstitute.org/&#34; target=&#34;_blank&#34;&gt;Broad Institute&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;basics&#34;&gt;Basics&lt;/h1&gt;
&lt;p&gt;The basic pipeline structure is as follows:
1) Pipeline (main script)
- Channels
- Processes
- Input
- Output
- Script
2) Configuration&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://www.nextflow.io/docs/latest/index.html&#34; target=&#34;_blank&#34;&gt;Official documentation&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/lifebit-ai/jax-tutorial&#34; target=&#34;_blank&#34;&gt;Nextflow tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;patterns&#34;&gt;Patterns&lt;/h1&gt;
&lt;p&gt;You can find Nextflow scripts for each of the examples here: &lt;a href=&#34;https://github.com/PhilPalmer/docs/tree/master/computing/nextflow-scripts&#34; target=&#34;_blank&#34;&gt;https://github.com/PhilPalmer/docs/tree/master/computing/nextflow-scripts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inspired by &lt;a href=&#34;http://nextflow-io.github.io/patterns/index.html&#34; target=&#34;_blank&#34;&gt;Nextflow patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;inputs&#34;&gt;Inputs&lt;/h2&gt;
&lt;h3 id=&#34;split-text-input&#34;&gt;Split text input&lt;/h3&gt;
&lt;p&gt;Create a channel from a plain text file split line by line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Channel
.fromPath(params.regions)
.ifEmpty { exit 1, &amp;quot;Cannot find file : ${params.regions}&amp;quot; }
.splitText()
.map { it -&amp;gt; it.trim() }
.set { regions }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run split_text_input.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;csv-input&#34;&gt;CSV input&lt;/h3&gt;
&lt;p&gt;Create a channel from a CSV file input&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Channel
.fromPath(params.vcf_paths)
.ifEmpty { exit 1, &amp;quot;Cannot find CSV file : ${params.vcf_paths}&amp;quot; }
.splitCsv(skip:1)
.map { sample_id,vcf,index -&amp;gt; [sample_id,file(vcf),file(index)] }
.set { vcfs }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run csv_input.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reusable-channels&#34;&gt;Reusable channels&lt;/h3&gt;
&lt;p&gt;Nextflow consumes (queue) channels meaning that they are consumed on use. However, it is possible to prevent needing to duplicate channels by creating value channels instead like so!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inputChannel = Channel.value(file(params.input_path))
// Channel can be used multiple times
inputChannel.println()
inputChannel.println()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run reusable_channels.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;channel-duplication&#34;&gt;Channel duplication&lt;/h3&gt;
&lt;p&gt;Sometimes you may need to duplicate a channel. This is espeically true if it&amp;rsquo;s a channel which contains multiple values (and/or is a queue channel) because these are consumed by Nextflow on use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Channel
.fromPath(params.input_path)
.ifEmpty { exit 1, &amp;quot;${params.input_path} not found&amp;quot;}
.into { inputChannel; inputChannel1; inputChannel2 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run channel_duplication.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-basename&#34;&gt;Get basename&lt;/h3&gt;
&lt;p&gt;Get the basename (i.e. the name filename minus the file extension) of a file in a channel. &lt;em&gt;You can also use &lt;code&gt;simpleName&lt;/code&gt; to get everything prior to the first period (&lt;code&gt;.&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Channel
.fromPath(params.input_path)
.map { file -&amp;gt; [file.baseName, file] }
.ifEmpty { exit 1, &amp;quot;${params.input_path} not found&amp;quot;}
.set { inputChannel }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run get_basename.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;input-validation&#34;&gt;Input validation&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;if (!params.important_parameter) exit 1, &amp;quot;The params `--important_parameter` has not been set.\n\tPlease provide a valid value for this parameter&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run input_validation.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;processes&#34;&gt;Processes&lt;/h2&gt;
&lt;h3 id=&#34;conditional-input-files&#34;&gt;Conditional input files&lt;/h3&gt;
&lt;p&gt;Nextflow does not like having conditional input files for processes. Fortunately you can use optional input files like so&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;optional_input_path = params.optional_input_path ? params.optional_input_path : &#39;data/no_file.txt&#39;
Channel
.fromPath(optional_input_path)
.ifEmpty { exit 1, &amp;quot;${optional_input_path} not found&amp;quot;}
.set { optionalInputChannel }
process test {
echo true
input:
file(optional_input) from optionalInputChannel
script:
optional_flag = optional_input != &#39;no_file.txt&#39; ? &amp;quot;--optional_input $optional_input&amp;quot; : &#39;&#39;
&amp;quot;&amp;quot;&amp;quot;
some_command.sh $optional_flag
&amp;quot;&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run optional_input.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conditional-flags&#34;&gt;Conditional flags&lt;/h3&gt;
&lt;p&gt;Here the &lt;code&gt;optional_flag&lt;/code&gt; will only be present if the user has set the &lt;code&gt;optional_flag&lt;/code&gt; Nextflow parameter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;process test {
echo true
script:
optional_flag = params.optional_flag ? &amp;quot;--optional_flag $params.optional_flag&amp;quot; : &#39;&#39;
&amp;quot;&amp;quot;&amp;quot;
some_command.sh $optional_flag
&amp;quot;&amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow run optional_input.nf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;extra-flags&#34;&gt;Extra flags&lt;/h3&gt;
&lt;h3 id=&#34;last-index-of&#34;&gt;Last index of&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;transforming-operators&#34;&gt;Transforming operators&lt;/h2&gt;
&lt;h3 id=&#34;reduce-channel&#34;&gt;Reduce channel&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lifebit-ai/genetic-traits/blob/master/main.nf#L157&#34; target=&#34;_blank&#34;&gt;https://github.com/lifebit-ai/genetic-traits/blob/master/main.nf#L157&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;complex-mapping&#34;&gt;Complex mapping&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;h3 id=&#34;printing-channel&#34;&gt;Printing channel&lt;/h3&gt;
&lt;h3 id=&#34;touch-files&#34;&gt;Touch files&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;
&lt;h3 id=&#34;publishdir&#34;&gt;PublishDir&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lifebit-ai/genetic-traits/blob/master/main.nf#L204-L210&#34; target=&#34;_blank&#34;&gt;https://github.com/lifebit-ai/genetic-traits/blob/master/main.nf#L204-L210&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;groovy&#34;&gt;Groovy&lt;/h2&gt;
&lt;h3 id=&#34;helper-functions&#34;&gt;Helper functions&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;// define helper functions
def isMode(mode) {
params.mode.toLowerCase().contains(mode)
}
def isTsv() {
params.reads.endsWith(&#39;tsv&#39;)
}
def get_pairs_simplename(simplename) {
simplename = simplename.endsWith(&#39;_1&#39;) ? simplename.substring(0, simplename.length() - 2) : simplename
simplename = simplename.endsWith(&#39;_R1&#39;) ? simplename.substring(0, simplename.length() - 3) : simplename
return simplename
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;h3 id=&#34;genomes-config&#34;&gt;Genomes config&lt;/h3&gt;
&lt;h3 id=&#34;cloud-create&#34;&gt;Cloud create&lt;/h3&gt;
&lt;p&gt;You can use Nextflow to launch an AWS instance (in this case one to run &lt;a href=&#34;https://aws.amazon.com/marketplace/pp/Illumina-Inc-DRAGEN-Complete-Suite/B07CZ3F5HY&#34; target=&#34;_blank&#34;&gt;Dragen&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cloud-spot.config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws {
accessKey = &#39;&#39;
secretKey = &#39;&#39;
region = &#39;eu-west-1&#39;
}
cloud {
imageId = &#39;ami-0ba4b94467989e99a&#39;
instanceType = &#39;f1.4xlarge&#39;
userName = &#39;centos&#39;
keyName = &#39;dragen&#39;
bootStorageSize = &#39;100 GB&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nextflow -c cloud-spot.config cloud create cluster_name -c 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;tips&#34;&gt;Tips&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nextflow console&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;log.info&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;useful-operators&#34;&gt;Useful operators&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;groupTuple()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;combine()&lt;/code&gt; (by)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;
Swiss army knife
Re-order or reduce channels (although Nextflow also provides a &lt;code&gt;reduce&lt;/code&gt; function)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;into()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.set()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nextflow.io/docs/latest/operator.html#collect&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;splitCsv()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;merge()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flatten()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;choice()&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Python</title><link>https://philpalmer.github.io/blog/documentation/computing/python/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/python/</guid><description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description></item><item><title>R</title><link>https://philpalmer.github.io/blog/documentation/computing/r/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://philpalmer.github.io/blog/documentation/computing/r/</guid><description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description></item></channel></rss>